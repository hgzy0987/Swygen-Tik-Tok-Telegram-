import os
import requests
from telegram import (
    Update, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes
)
from keep_alive import keep_alive
from dotenv import load_dotenv

# Load environment variables
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
RAPIDAPI_KEY = os.getenv("RAPIDAPI_KEY")

# Reply Keyboard
reply_keyboard = [
    [KeyboardButton("ЁЯОм DOWNLOAD VIDEO")],
    [KeyboardButton("ЁЯСитАНЁЯТ╗ DEVELOPER INFO")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# Start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = (
        f"ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ {user.mention_html()}!\n\n"
        "ЁЯУе *TikTok Downloader Bot* ржП рж╕рзНржмрж╛ржЧрждржо ЁЯОЙ\n\n"
        "ЁЯСЙ ржПржЦрж╛ржирзЗ ржЖржкржирж┐ рж╕рж╣ржЬрзЗржЗ TikTok ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи:\n"
        "   тАв Without Watermark\n"
        "   тАв HD Quality Video\n"
        "   тАв MP3 Audio\n\n"
        "тЬи CREATED BY @Swygen_bd"
    )
    await update.message.reply_html(welcome_text, reply_markup=markup)

# Handle DOWNLOAD VIDEO / DEVELOPER INFO / Links
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # DOWNLOAD VIDEO button
    if text == "ЁЯОм DOWNLOAD VIDEO":
        await update.message.reply_text(
            "ЁЯФЧ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ *TikTok ржнрж┐ржбрж┐ржУ рж▓рж┐ржВржХ* ржкрж╛ржарж╛ржитАж",
            parse_mode="Markdown"
        )
        return

    # If user sends TikTok link
    if text.startswith("http"):
        await update.message.reply_text("тП│ ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЕржкрзЗржХрзНрж╖рж╛ ржХрж░рзБржи, ржнрж┐ржбрж┐ржУ ржкрзНрж░рж╕рзЗрж╕ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗтАж")

        url = f"https://tiktok-video-no-watermark2.p.rapidapi.com/video/url?url={text}"
        headers = {
            "x-rapidapi-host": "tiktok-video-no-watermark2.p.rapidapi.com",
            "x-rapidapi-key": RAPIDAPI_KEY
        }

        try:
            response = requests.get(url, headers=headers)
            data = response.json()

            if "data" not in data:
                await update.message.reply_text("тЭМ ржнрж┐ржбрж┐ржУ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ ржмрж╛ API ржмрж░рзНрждржорж╛ржирзЗ ржХрж╛ржЬ ржХрж░ржЫрзЗ ржирж╛ред")
                return

            no_watermark = data["data"].get("no_watermark")
            hd = data["data"].get("hd")
            audio = data["data"].get("audio")

            msg = "тЬЕ *ржбрж╛ржЙржирж▓рзЛржб ржЕржкрж╢ржи рж╕ржорзВрж╣:*\n\n"
            if no_watermark:
                msg += f"ЁЯФ╣ [Without Watermark Video]({no_watermark})\n"
            if hd:
                msg += f"ЁЯФ╣ [HD Quality Video]({hd})\n"
            if audio:
                msg += f"ЁЯФ╣ [MP3 Audio Download]({audio})\n"

            await update.message.reply_markdown(msg)

        except Exception as e:
            await update.message.reply_text("тЪая╕П ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
            print("Error:", e)

    # Developer Info
    elif text == "ЁЯСитАНЁЯТ╗ DEVELOPER INFO":
        info = (
            "ЁЯТб *Bot Information:*\n\n"
            "ржПржЗ ржмржЯрзЗрж░ ржорж╛ржзрзНржпржорзЗ ржЖржкржирж┐ TikTok ржнрж┐ржбрж┐ржУ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи:\n"
            "   тАв Without Watermark\n"
            "   тАв HD Quality\n"
            "   тАв MP3 Format\n\n"
            "ЁЯЪА ржжрзНрж░рзБржд, ржирж┐рж░рж╛ржкржж ржПржмржВ рж╕рж╣ржЬ ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржпред\n\n"
            "тЬи CREATED BY @Swygen_bd"
        )
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton("ЁЯУй Contact Developer", url="https://t.me/Swygen_bd")]]
        )
        await update.message.reply_markdown(info, reply_markup=keyboard)

# Run the bot
def main():
    keep_alive()
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("тЬЕ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
